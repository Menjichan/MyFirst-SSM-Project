package com.menjilearn.crm.workbench.mapper;

import com.menjilearn.crm.workbench.pojo.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 25 15:21:35 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 25 15:21:35 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 25 15:21:35 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 25 15:21:35 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 25 15:21:35 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 25 15:21:35 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存一个创建的市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动
     * @param selectConditionMap
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> selectConditionMap);

    /**
     * 根据条件查询符合条件的市场活动的总记录条数
     * @param selectConditionMap
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> selectConditionMap);

    /**
     * 根据ids批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据传入的市场活动表单更新市场信息
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据ids查询多条市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivitiesByIds(String[] ids);

    /**
     * 根据市场活动列表，批量添加市场活动
     * @param activities
     * @return
     */
    int insertActivitiesByList(@Param("activities") List<Activity> activities);

    /**
     * 根据id查询市场活动详细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);
}